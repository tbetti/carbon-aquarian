#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    // smart_contracts/backend/contract.py:5
    // class Backend(ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@5
    pushbytes 0x02bece11 // method "hello(string)string"
    txna ApplicationArgs 0
    match main_hello_route@3
    err

main_hello_route@3:
    // smart_contracts/backend/contract.py:6
    // @abimethod()
    txn OnCompletion
    !
    txn ApplicationID
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    b hello

main___algopy_default_create@5:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// smart_contracts.backend.contract.Backend.hello[routing]() -> void:
hello:
    // smart_contracts/backend/contract.py:6
    // @abimethod()
    txna ApplicationArgs 1
    dup
    pushint 0 // 0
    extract_uint16
    pushint 2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+utf8[])
    extract 2 0
    // smart_contracts/backend/contract.py:8
    // return "Hello, " + name
    pushbytes "Hello, "
    swap
    concat
    // smart_contracts/backend/contract.py:6
    // @abimethod()
    dup
    len
    itob
    extract 6 2
    swap
    concat
    pushbytes 0x151f7c75
    swap
    concat
    log
    pushint 1 // 1
    return
